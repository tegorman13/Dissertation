

```{r}
pacman::p_load(dplyr,purrr,tidyr,tibble,ggplot2,stringr, here,conflicted, gt, ggh4x, patchwork, knitr)
walk(c("Display_Functions"), ~source(here::here(paste0("Functions/", .x, ".R"))))

```


```{r}

library(ggplot2)

# Generate distance values
distance <- seq(0, 10, length.out = 100)

# Define the c parameter values
c_values <- c(0.08, 0.5, 1)

# Calculate similarity for each c value
similarity_data <- data.frame(
  distance = rep(distance, length(c_values)),
  c = factor(rep(c_values, each = length(distance))),
  similarity = exp(-rep(c_values, each = length(distance)) * distance^2)
)

# Create the faceted plot
c_example <- ggplot(similarity_data, aes(x = distance, y = similarity)) +
  geom_line(linewidth = 1) +
  labs(x = "Distance", y = "Similarity") +
  #scale_color_manual(values = c("blue", "green", "red")) +
  facet_wrap(~ c, ncol = 3, labeller = labeller(c = function(x) paste("c =", x))) +
  theme_minimal() +
  theme(
    # plot.title = element_text(hjust = 0.5, size = 14, face = "plain"),
    # axis.title = element_text(size = 12),
    legend.position = "none",
    strip.text = element_text(size = 12)
  ) +
  ggtitle("Gaussian Similarity Decay")


ggsave(here::here("Presentation/assets/c_example.png"), c_example, width = 4.0, height = 3, units = "in", dpi = 600)

```


# HTW Results

```{r}

pacman::p_load(dplyr,purrr,tidyr,tibble,ggplot2,
  brms,tidybayes, rstanarm,emmeans,broom,bayestestR,
  data.table, stringr, here,conflicted, gt, ggh4x, patchwork, knitr)
#options(brms.backend="cmdstanr",mc.cores=4)
walk(c("brms","dplyr","bayestestR","here"), conflict_prefer_all, quiet = TRUE)
options(digits=2, scipen=999, dplyr.summarise.inform=FALSE)

walk(c("brms","dplyr","bayestestR","here"), conflict_prefer_all, quiet = TRUE)
walk(c("Display_Functions","deLosh_data","fun_alm","fun_indv_fit","fun_model", "prep_model_data","org_functions"), ~source(here::here(paste0("Functions/", .x, ".R"))))

e1 <- readRDS(here("data/e1_08-21-23.rds")) 
e1Sbjs <- e1 |> group_by(id,condit) |> summarise(n=n())
testE1 <- e1 |> filter(expMode2 == "Test")
nbins=5
trainE1 <-  e1 |> filter(expMode2=="Train") |> group_by(id,condit, vb) |> 
    mutate(Trial_Bin = cut( gt.train, breaks = seq(1, max(gt.train),length.out=nbins+1),include.lowest = TRUE, labels=FALSE)) 
trainE1_max <- trainE1 |> filter(Trial_Bin == nbins, bandInt==800)
trainE1_avg <- trainE1_max |> group_by(id,condit) |> summarise(avg = mean(dist))


condEffects <- function(m,xvar){
  m |> ggplot(aes(x = {{xvar}}, y = .value, color = condit, fill = condit)) + 
  stat_dist_pointinterval() + 
  stat_halfeye(alpha=.1, height=.5) +
  theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) 
  
}
```


## HTW E1 

```{r}
#| label: fig-e1-test-dev
#| fig-cap: Experiment 1 Testing Accuracy. A) Empricial Deviations from target band during testing without feedback stage. B) Conditional effect of condition (Constant vs. Varied) and testing band type (trained bands vs. novel extrapolation bands) on testing accuracy. Error bars represent 95% credible intervals.
#| fig-width: 4
#| fig-height: 4

# pe1td <- testE1 |>  
#   ggplot(aes(x = vb, y = dist,fill=condit)) +
#     stat_summary(geom = "bar", position=position_dodge(), fun = mean) +
#     stat_summary(geom = "errorbar", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) + 
#   theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) +
#   labs(x="Band", y="Deviation From Target Band")


pe1td <- testE1 |> ggplot(aes(x = vb, y = dist,fill=condit,
                               col=ifelse(bandType=="Trained","black","lightgray"),
                               size=ifelse(bandType=="Trained",1.0,.5))) +
  stat_bar + 
  theme(legend.title.position="top",
        legend.title = element_text(face = "bold"),
        axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) +
  labs(x="Band", y="Deviation", fill="Condition") +
     # scale_color_manual(values = c("black" = "black"), guide = "legend") +
  scale_color_manual(values=c("black","lightgray"), 
                     name= "Band Type",
                     labels = c("Trained","Extrapolation"),
                     guide = guide_legend(override.aes = list(fill = NA))
                     ) +
  scale_size_continuous(range = c(0.8, 1.0), guide="none")


bmtd <- readRDS(paste0(here::here("data/model_cache/"), "e1_dist_Cond_Type_RF_2.rds"))
pe1ce <- bmtd |> emmeans( ~condit + bandType) |>
  gather_emmeans_draws() |>
 condEffects(bandType) + labs(y="Deviation", x="Band Type")

#p2 <- (pe1td + pe1ce) + plot_annotation(tag_levels= 'A')
#ggsave(here::here("Assets/figs", "e1_test-dev.png"), p2, width=8, height=4, bg="white")
#p2


e1_vxBMM <- readRDS(paste0(here::here("data/model_cache", "e1_testVxBand_RF_5k.rds")))
pe1vce <- e1_vxBMM |> emmeans( ~condit + bandInt,re_formula=NA, 
                     at = list(bandInt = c(100, 350, 600, 800, 1000, 1200))) |>
gather_emmeans_draws() |> 
condEffects(bandInt) +
stat_lineribbon(alpha = .25, size = 1, .width = c(.95)) +
  geom_abline(slope = 1, intercept = 200, linetype = "dashed", color = "gray", size = .5,alpha=.5) +
scale_x_continuous(breaks = c(100, 350, 600, 800, 1000, 1200), 
                   labels = levels(testE1$vb), 
                   limits = c(100, 1200)) + 
scale_y_continuous(expand=expansion(add=100),breaks=round(seq(400,1400,by=200),2)) +
theme(legend.position="none") + 
  #theme(legend.title=element_blank(),legend.position="right") + 
labs(y="Velcoity", x="Band")

fe <- fixef(e1_vxBMM)[,1]
fixed_effect_bandInt <- fixef(e1_vxBMM)[,1]["bandInt"]
fixed_effect_interaction <- fixef(e1_vxBMM)[,1]["conditVaried:bandInt"]

re <- data.frame(ranef(e1_vxBMM, pars = "bandInt")$id[, ,'bandInt']) |> 
  rownames_to_column("id") |> 
  left_join(e1Sbjs,by="id") |>
  mutate(adjust= fixed_effect_bandInt + fixed_effect_interaction*(condit=="Varied"),slope = Estimate + adjust )


pid_den1 <- ggplot(re, aes(x = slope, fill = condit)) + 
  geom_density(alpha=.5) + 
  geom_vline(xintercept = 1, linetype="dashed",alpha=.5) +
  xlim(c(min(re$slope)-.3, max(re$slope)+.3))+
   theme(legend.title=element_blank()) + 
  labs(x="Slope Coefficient",y="Density")

pid_slopes1 <- re |>  mutate(id=reorder(id,slope)) |>
  ggplot(aes(y=id, x=slope,fill=condit,color=condit)) + 
    geom_pointrange(aes(xmin=Q2.5+adjust, xmax=Q97.5+adjust)) + 
  geom_vline(xintercept = 1, linetype="dashed",alpha=.5) +
     theme(legend.title=element_blank(), 
           axis.text.y = element_text(size=6) ) + 
    labs(x="Estimated Slope", y="Participant")  + 
    ggh4x::facet_wrap2(~condit,axes="all",scales="free_y")

pe1td
pe1ce

pe1vce
pid_den1
pid_slopes1

ggsave(here::here("Presentation/assets/htw_e1_test1.png"), pe1td, width = 4.0, height = 3, units = "in", dpi = 300)
ggsave(here::here("Presentation/assets/htw_e1_test2.png"), pe1ce, width = 4.0, height = 3, units = "in", dpi = 300)
ggsave(here::here("Presentation/assets/htw_e1_test3.png"), pe1vce, width = 4.0, height = 3, units = "in", dpi = 300)
ggsave(here::here("Presentation/assets/htw_e1_test4.png"), pid_den1, width = 4.0, height = 3, units = "in", dpi = 300)
ggsave(here::here("Presentation/assets/htw_e1_test5.png"), pid_slopes1, width = 4.0, height = 3, units = "in", dpi = 300)
```


## HTW Experiment 2

```{r}
#| label: fig-e2-test-dev
#| fig-cap: Experiment 2 Testing Accuracy. A) Empricial Deviations from target band during testing without feedback stage. B) Conditional effect of condition (Constant vs. Varied) and testing band type (trained bands vs. novel extrapolation bands) on testing accuracy. Error bars represent 95% credible intervals.
#| fig-width: 5
#| fig-height: 5
e2 <- readRDS(here("data/e2_08-04-23.rds")) 
e2Sbjs <- e2 |> group_by(id,condit) |> summarise(n=n())
testE2 <- e2 |> filter(expMode2 == "Test")
nbins=5
trainE2 <-  e2 |> filter(expMode2=="Train") |> group_by(id,condit, vb) |> 
    mutate(Trial_Bin = cut( gt.train, breaks = seq(1, max(gt.train),length.out=nbins+1),include.lowest = TRUE, labels=FALSE)) 
trainE2_max <- trainE2 |> filter(Trial_Bin == nbins, bandInt==600)

bmtd2 <- readRDS(paste0(here::here("data/model_cache/"), "e2_dist_Cond_Type_RF_2.rds"))

condEffects <- function(m,xvar){
  m |> ggplot(aes(x = {{xvar}}, y = .value, color = condit, fill = condit)) + 
  stat_dist_pointinterval() + 
  stat_halfeye(alpha=.1, height=.5) +
  theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) 
  
}

pe2td <- testE2 |> ggplot(aes(x = vb, y = dist,fill=condit,
                               col=ifelse(bandType=="Trained","black","lightgray"),
                               size=ifelse(bandType=="Trained",1.0,.5))) +
  stat_bar + 
  theme(legend.title.position="top",
        legend.title = element_text(face = "bold"),
        axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) +
  labs(x="Band", y="Deviation", fill="Condition") +
  scale_color_manual(values=c("black","lightgray"), 
                     name= "Band Type",
                     labels = c("Trained","Extrapolation"),
                     guide = guide_legend(override.aes = list(fill = NA))
                     ) +
  scale_size_continuous(range = c(0.8, 1.0), guide="none")


pe2ce <- bmtd2 |> emmeans( ~condit + bandType) |>
  gather_emmeans_draws() |>
 condEffects(bandType) + labs(y="Absolute Deviation From Band", x="Band Type")  
  
e2_vxBMM <- readRDS(paste0(here::here("data/model_cache", "e2_testVxBand_RF_5k.rds")))

pe2vce <- e2_vxBMM |> emmeans( ~condit + bandInt,re_formula=NA, 
                       at = list(bandInt = c(100, 350, 600, 800, 1000, 1200))) |>
  gather_emmeans_draws() |> 
  condEffects(bandInt) +
  stat_lineribbon(alpha = .25, size = 1, .width = c(.95)) +
  geom_abline(slope = 1, intercept = 200, linetype = "dashed", color = "gray", size = .5,alpha=.5) +
  scale_x_continuous(breaks = c(100, 350, 600, 800, 1000, 1200), 
                     labels = levels(testE2$vb), 
                     limits = c(100, 1200)) + 
scale_y_continuous(expand=expansion(add=100),breaks=round(seq(200,1400,by=200),2)) +
  theme(legend.title=element_blank()) + 
  labs(y="Velcoity", x="Band")

fe <- fixef(e2_vxBMM)[,1]
fixed_effect_bandInt <- fixef(e2_vxBMM)[,1]["bandInt"]
fixed_effect_interaction <- fixef(e2_vxBMM)[,1]["conditVaried:bandInt"]

re <- data.frame(ranef(e2_vxBMM, pars = "bandInt")$id[, ,'bandInt']) |> 
  rownames_to_column("id") |> 
  left_join(e2Sbjs,by="id") |>
  mutate(adjust= fixed_effect_bandInt + fixed_effect_interaction*(condit=="Varied"),slope = Estimate + adjust )

pid_den2 <- ggplot(re, aes(x = slope, fill = condit)) + 
  geom_density(alpha=.5) + 
  geom_vline(xintercept = 1, linetype="dashed",alpha=.5) +
  xlim(c(min(re$slope)-.3, max(re$slope)+.3))+
   theme(legend.title=element_blank()) + 
  labs(x="Slope Coefficient",y="Density")

pid_slopes2 <- re |>  mutate(id=reorder(id,slope)) |>
  ggplot(aes(y=id, x=slope,fill=condit,color=condit)) + 
    geom_pointrange(aes(xmin=Q2.5+adjust, xmax=Q97.5+adjust)) + 
  geom_vline(xintercept = 1, linetype="dashed",alpha=.5) +
      theme(legend.title=element_blank(), 
        axis.text.y = element_text(size=6) ) + 
    labs(x="Estimated Slope", y="Participant")  + 
    ggh4x::facet_wrap2(~condit,axes="all",scales="free_y")

pe2td
pe2ce
pe2vce
pid_den2
pid_slopes2



ggsave(here::here("Presentation/assets/htw_e2_test1.png"), pe2td, width = 4.0, height = 3, units = "in", dpi = 600)
ggsave(here::here("Presentation/assets/htw_e2_test2.png"), pe2ce, width = 4.0, height = 3, units = "in", dpi = 600)
ggsave(here::here("Presentation/assets/htw_e2_test3.png"), pe2vce, width = 4.0, height = 3, units = "in", dpi = 600)
ggsave(here::here("Presentation/assets/htw_e2_test4.png"), pid_den2, width = 4.0, height = 3, units = "in", dpi = 600)
ggsave(here::here("Presentation/assets/htw_e2_test5.png"), pid_slopes2, width = 4.0, height = 3, units = "in", dpi = 600)

```


## HTW Exp 3


```{r}
#| fig-width: 4
#| fig-height: 6
e3 <- readRDS(here("data/e3_08-04-23.rds")) |> 
    mutate(trainCon=case_when(
    bandOrder=="Original" ~ "800",
    bandOrder=="Reverse" ~ "600",
    TRUE ~ NA_character_
    ), trainCon=as.numeric(trainCon)) 
e3Sbjs <- e3 |> group_by(id,condit,bandOrder) |> summarise(n=n())
testE3 <- e3 |> filter(expMode2 == "Test")
nbins=5
trainE3 <-  e3 |> filter(expMode2=="Train") |> group_by(id,condit,bandOrder, vb) |> 
    mutate(Trial_Bin = cut( gt.train, breaks = seq(1, max(gt.train),length.out=nbins+1),include.lowest = TRUE, labels=FALSE)) 
trainE3_max <- trainE3 |> filter(Trial_Bin == nbins, bandInt==trainCon)


bmtd3 <- readRDS(paste0(here::here("data/model_cache/"), "e3_dist_Cond_Type_RF_2.rds"))


pe3td <- testE3 |> ggplot(aes(x = vb, y = dist,fill=condit,
                               col=ifelse(bandType=="Trained","black","lightgray"),
                               size=ifelse(bandType=="Trained",1.0,.5))) +
  stat_bar + 
  facet_wrap(~bandOrder,ncol=1) +
  theme(legend.title.position="top",
        legend.title = element_text(face = "bold"),
        axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) +
  labs(x="Band", y="Deviation", fill="Condition") +
  scale_color_manual(values=c("black","lightgray"), 
                     name= "Band Type",
                     labels = c("Trained","Extrapolation"),
                     guide = guide_legend(override.aes = list(fill = NA))
                     ) +
  scale_size_continuous(range = c(0.8, 1.0), guide="none")
    



pe3ce <- bmtd3 |> emmeans( ~condit *bandOrder*bandType) |>
  gather_emmeans_draws() |>
 condEffects(bandType) + labs(y="Deviation", x="Band Type") + 
 facet_wrap(~bandOrder,ncol=1)


e3_vxBMM <- readRDS(paste0(here::here("data/model_cache", "e3_testVxBand_RF_5k.rds")))


pe3vce <- e3_vxBMM |> emmeans( ~condit* bandOrder* bandInt, 
                       at = list(bandInt = c(100, 350, 600, 800, 1000, 1200))) |>
  gather_emmeans_draws() |> 
  condEffects(bandInt) +
  facet_wrap(~bandOrder,ncol=1) +
  stat_lineribbon(alpha = .25, size = 1, .width = c(.95)) +
  geom_abline(slope = 1, intercept = 200, linetype = "dashed", color = "gray", size = .5,alpha=.5) +
  scale_x_continuous(breaks = c(100, 350, 600, 800, 1000, 1200), 
                     labels = levels(testE3$vb), 
                     limits = c(100, 1200)) + 
scale_y_continuous(expand=expansion(add=100),breaks=round(seq(300,1400,by=200),2)) +
  theme(legend.title=element_blank()) + 
  labs(y="Velcoity", x="Band")

fe <- fixef(e3_vxBMM)[,1]
fixed_effect_bandInt <- fixef(e3_vxBMM)[,1]["bandInt"]
fixed_effect_interaction1 <- fixef(e3_vxBMM)[,1]["conditVaried:bandInt"]
fixed_effect_interaction2 <- fixef(e3_vxBMM)[,1]["bandOrderReverse:bandInt"]
fixed_effect_interaction3 <- fixef(e3_vxBMM)[,1]["conditVaried:bandOrderReverse:bandInt"]

re <- data.frame(ranef(e3_vxBMM, pars = "bandInt")$id[, ,'bandInt']) |> 
  rownames_to_column("id") |> 
  left_join(e3Sbjs,by="id") |>
  mutate(adjust= fixed_effect_bandInt + fixed_effect_interaction1*(condit=="Varied") + 
           fixed_effect_interaction2*(bandOrder=="Reverse") + 
           fixed_effect_interaction3*(condit=="Varied" & bandOrder=="Reverse"),
  slope = Estimate + adjust )

pid_den3 <- ggplot(re, aes(x = slope, fill = condit)) + 
  geom_density(alpha=.5) + 
  xlim(c(min(re$slope)-.3, max(re$slope)+.3))+
  geom_vline(xintercept = 1, linetype="dashed",alpha=.5) +
   theme(legend.title=element_blank()) + 
  labs(x="Slope Coefficient",y="Density") +
  facet_wrap(~bandOrder,ncol=1)

pid_slopes3 <- re |>  
    mutate(id=reorder(id,slope)) |>
  ggplot(aes(y=id, x=slope,fill=condit,color=condit)) + 
    geom_pointrange(aes(xmin=Q2.5+adjust, xmax=Q97.5+adjust)) + 
    geom_vline(xintercept = 1, linetype="dashed",alpha=.5) +
    theme(legend.title=element_blank(), 
      axis.text.y = element_text(size=6) ) + 
    labs(x="Estimated Slope", y="Participant")  + 
    ggh4x::facet_nested_wrap(bandOrder~condit,axes="all",scales="free_y")


pe3td
pe3ce
pe3vce
pid_den3
pid_slopes3


ggsave(here::here("Presentation/assets/htw_e3_test1.png"), pe3td, width = 4.0, height = 6, units = "in", dpi = 600)
ggsave(here::here("Presentation/assets/htw_e3_test2.png"), pe3ce, width = 4.0, height = 6, units = "in", dpi = 600)
ggsave(here::here("Presentation/assets/htw_e3_test3.png"), pe3vce, width = 4.0, height = 6, units = "in", dpi = 600)
ggsave(here::here("Presentation/assets/htw_e3_test4.png"), pid_den3, width = 4.0, height = 6, units = "in", dpi = 600)
ggsave(here::here("Presentation/assets/htw_e3_test5.png"), pid_slopes3, width = 4.0, height = 6, units = "in", dpi = 600)

```




# Design diagrams


```{r}

library(ggplot2)
library(dplyr)

# Data preparation
data <- data.frame(
  x = c(2, 3, 1, 2, 3),
  y = c(1, 1, 0.6, 0.6, 0.6),  # Adjusted y values for the bottom segment
  label = c("Constant-Train\n(100 trials)", "Test", "Varied-Train\n(50 trials)", "Varied-Train\n(50 trials)", "Test"),
  color = c("blue", "red", "blue", "blue", "red")
)

segments <- data.frame(
  x = c(0.5, 1.5, 0.5, 1.5),
  xend = c(1.5, 3.0, 1.5, 3.0),
  y = c(1, 1, 0.6, 0.6),  # Adjusted y values for the segments
  yend = c(1, 1, 0.6, 0.6)
)

# Plot
ggplot() +
  geom_segment(data = segments, aes(x = x, xend = xend, y = y, yend = yend), 
               linewidth = 1.2, color = "gray40") +
  geom_point(data = data, aes(x = x, y = y, color = color), size = 12) +
  geom_text(data = data %>% filter(color == "blue"), aes(x = x, y = y, label = label), 
            color = "black", size = 4, vjust = -1, fontface = "bold") +
  geom_text(data = data %>% filter(color == "red"), aes(x = x, y = y, label = label), 
            color = "black", size = 4, vjust = -2, fontface = "bold") +
  scale_color_manual(values = c("blue" = "#3366CC", "red" = "#DC3912")) +
  xlim(0, 3.5) +
  ylim(0, 1.5) +  # Adjusted ylim to maintain the overall plot height
  theme_void() +
  theme(legend.position = "none",
        plot.margin = margin(10, 20, 10, 20),
        plot.background = element_rect(fill = "white", color = NA),
        panel.background = element_rect(fill = "white", color = NA))
```


```{r}
#| fig-width: 10
#| fig-height: 7

library(ggplot2)
library(dplyr)

create_data <- function(varied_train, constant_train, both_test, varied_trials, constant_trials) {
  varied_labels <- paste0("Varied-Train\n(", varied_trials, " trials)")
  constant_labels <- paste0("Constant-Train\n(", constant_trials, " trials)")
  test_labels <- "Testing\n(both groups)"
  
  data <- data.frame(
    x = c(varied_train, constant_train, both_test),
    y = c(rep(0.7, length(varied_train)), rep(1, length(constant_train)), rep(0.3, length(both_test))),
    label = c(rep(varied_labels, length(varied_train)),
              rep(constant_labels, length(constant_train)),
              rep(test_labels, length(both_test))),
    color = c(rep("blue", length(varied_train)), rep("blue", length(constant_train)), rep("red", length(both_test)))
  )
  
  data
}

create_segments <- function(data) {
  min_x <- min(data$x)
  max_x <- max(data$x)
  segments <- data.frame(
    x = c(min_x - 0.5, min_x - 0.5, min_x - 0.5),
    xend = c(max_x + 0.5, max_x + 0.5, max_x + 0.5),
    y = c(0.7, 1, 0.3),
    yend = c(0.7, 1, 0.3)
  )
  segments
}

create_plot <- function(varied_train, constant_train, both_test, varied_trials, constant_trials) {
  data <- create_data(varied_train, constant_train, both_test, varied_trials, constant_trials)
  segments <- create_segments(data)
  
  ggplot() +
    geom_segment(data = segments, aes(x = x, xend = xend, y = y, yend = yend),
                 linewidth = 1.2, color = "gray40") +
    geom_point(data = data, aes(x = x, y = y, color = color), size = 12) +
    geom_text(data = data, aes(x = x, y = y, label = label),
              color = "black", size = 4, vjust = -0.6, hjust = 0.5, fontface = "bold") +
    scale_color_manual(values = c("blue" = "#3366CC", "red" = "#DC3912")) +
    xlim(min(data$x) - 1, max(data$x) + 1) +
    ylim(0, 1.5) +
    theme_void() +
    theme(legend.position = "none",
          plot.margin = margin(10, 20, 10, 20),
          plot.background = element_rect(fill = "white", color = NA),
          panel.background = element_rect(fill = "white", color = NA))
}

# Example usage
varied_train <- c(1, 3, 5) # Specify varied training positions
constant_train <- c(4)     # Specify constant training position
both_test <- c(2.5, 3.5)        # Specify test position
varied_trials <- 50        # Specify number of varied trials
constant_trials <- 100     # Specify number of constant trials

plot <- create_plot(varied_train, constant_train, both_test, varied_trials, constant_trials)
print(plot)



varied_train <- c(1, 2, 3) # Specify varied training positions
constant_train <- c(3)     # Specify constant training position
both_test <- c(1,2,3,4,5,6)        # Specify test position
varied_trials <- 30        # Specify number of varied trials
constant_trials <- 90     # Specify number of constant trials
 create_plot(varied_train, constant_train, both_test, varied_trials, constant_trials)

```


```{r}
#| fig-width: 10
#| fig-height: 7


library(ggplot2)
library(dplyr)
library(grid)

create_data <- function(varied_train, constant_train, both_test, varied_trials, constant_trials) {
  varied_labels <- paste0("Varied-Train\n(", varied_trials, " trials)")
  constant_labels <- paste0("Constant-Train\n(", constant_trials, " trials)")
  test_labels <- "Testing\n(both groups)"
  
  data <- data.frame(
    x = c(varied_train, constant_train, both_test),
    y = c(rep(0.7, length(varied_train)), rep(1, length(constant_train)), rep(0.3, length(both_test))),
    label = c(rep(varied_labels, length(varied_train)),
              rep(constant_labels, length(constant_train)),
              rep(test_labels, length(both_test))),
    color = c(rep("blue", length(varied_train)), rep("blue", length(constant_train)), rep("red", length(both_test)))
  )
  
  data
}

create_segments <- function(data) {
  min_x <- min(data$x)
  max_x <- max(data$x)
  segments <- data.frame(
    x = c(min_x - 0.5, min_x - 0.5, min_x - 0.5),
    xend = c(max_x + 0.5, max_x + 0.5, max_x + 0.5),
    y = c(0.7, 1, 0.3),
    yend = c(0.7, 1, 0.3)
  )
  segments
}

create_plot <- function(varied_train, constant_train, both_test, varied_trials, constant_trials) {
  data <- create_data(varied_train, constant_train, both_test, varied_trials, constant_trials)
  segments <- create_segments(data)
  
  ggplot() +
    geom_segment(data = segments, aes(x = x, xend = xend, y = y, yend = yend),
                 linewidth = 1.2, color = "gray40") +
    geom_point(data = data, aes(x = x, y = y, color = color), size = 12) +
    geom_text(data = data, aes(x = x, y = y, label = label),
              color = "black", size = 4, vjust = -0.6, hjust = 0.5, fontface = "bold") +
    scale_color_manual(values = c("blue" = "#3366CC", "red" = "#DC3912")) +
    xlim(min(data$x) - 2, max(data$x) + 1) +
    ylim(0, 1.5) +
    theme_void() +
    annotate("text", x = min(data$x) - .8, y = 1.1, label = "{", color = "black", size = 28, vjust = 1.5) +
    annotate("text", x = min(data$x) - .8, y = 0.45, label = "{", color = "black", size = 18, vjust = 1.5) +
    annotate("text", x = min(data$x) - 1.2, y = 0.85, label = "Training", color = "black", size = 5, angle = 90, vjust = 1.5, fontface = "bold") +
    annotate("text", x = min(data$x) - 1.2, y = 0.35, label = "Testing", color = "black", size = 5, angle = 90, vjust = 1.5, fontface = "bold") +
    theme(legend.position = "none",
          plot.margin = margin(10, 20, 10, 20),
          plot.background = element_rect(fill = "white", color = NA),
          panel.background = element_rect(fill = "white", color = NA))
}

# Example usage

varied_train <- c(1, 2, 3) # Specify varied training positions
constant_train <- c(3)     # Specify constant training position
both_test <- c(1, 2, 3, 4, 5, 6)        # Specify test position
varied_trials <- 30        # Specify number of varied trials
constant_trials <- 90     # Specify number of constant trials
plot <- create_plot(varied_train, constant_train, both_test, varied_trials, constant_trials)
print(plot)
```







```{r}
#| fig-width: 10
#| fig-height: 7

library(ggplot2)
library(dplyr)

create_data <- function(varied_train, constant_train, both_test, varied_trials, constant_trials) {
  varied_labels <- paste0("Varied-Train\n(", varied_trials, " trials)")
  constant_labels <- paste0("Constant-Train\n(", constant_trials, " trials)")
  test_labels <- "Testing\n(both groups)"
  
  data <- data.frame(
    x = c(varied_train, constant_train, both_test),
    y = c(rep(0.7, length(varied_train)), rep(1, length(constant_train)), rep(0.3, length(both_test))),
    label = c(rep(varied_labels, length(varied_train)),
              rep(constant_labels, length(constant_train)),
              rep(test_labels, length(both_test))),
    color = c(rep("blue", length(varied_train)), rep("blue", length(constant_train)), rep("red", length(both_test)))
  )
  
  data
}

create_segments <- function(data) {
  min_x <- min(data$x)
  max_x <- max(data$x)
  segments <- data.frame(
    x = c(min_x - 0.5, min_x - 0.5, min_x - 0.5),
    xend = c(max_x + 0.5, max_x + 0.5, max_x + 0.5),
    y = c(0.7, 1, 0.3),
    yend = c(0.7, 1, 0.3)
  )
  segments
}

create_plot <- function(varied_train, constant_train, both_test, varied_trials, constant_trials) {
  data <- create_data(varied_train, constant_train, both_test, varied_trials, constant_trials)
  segments <- create_segments(data)
  
  # Variables for Training segment position
  train_x <- min(data$x) - .5
  train_y_start <- 0.65
  train_y_end <- 1.05
  train_text_y <- 1
  
  # Variables for Testing segment position
  test_x <- min(data$x) - .5
  test_y_start <- 0.25
  test_y_end <- 0.4
  test_text_y <- 0.45
  
  ggplot() +
    geom_segment(data = segments, aes(x = x, xend = xend, y = y, yend = yend),
                 linewidth = 1.2, color = "gray40") +
    geom_point(data = data, aes(x = x, y = y, color = color), size = 12) +
    geom_text(data = data, aes(x = x, y = y, label = label),
              color = "black", size = 4, vjust = -0.6, hjust = 0.5, fontface = "bold") +
    geom_segment(aes(x = train_x - 0.3, xend = train_x - 0.3, y = train_y_start, yend = train_y_end), color = "black", linewidth = 1.2) +
    geom_segment(aes(x = train_x - 0.5, xend = train_x, y = train_y_end, yend = train_y_end), color = "black", linewidth = 1.2) +
    geom_segment(aes(x = train_x - 0.5, xend = train_x, y = train_y_start, yend = train_y_start), color = "black", linewidth = 1.2) +
    geom_text(aes(x = train_x - .6, y = train_text_y, label = "Training"), angle = 90, vjust = 0.5, hjust = 1.5, size = 4, fontface = "bold") +
    geom_segment(aes(x = test_x - 0.3, xend = test_x - 0.3, y = test_y_start, yend = test_y_end), color = "black", linewidth = 1.2) +
    geom_segment(aes(x = test_x - 0.5, xend = test_x, y = test_y_end, yend = test_y_end), color = "black", linewidth = 1.2) +
    geom_segment(aes(x = test_x - 0.5, xend = test_x, y = test_y_start, yend = test_y_start), color = "black", linewidth = 1.2) +
    geom_text(aes(x = test_x - .6, y = test_text_y, label = "Testing"), angle = 90, vjust = 0.5, hjust = 1.5, size = 4, fontface = "bold") +
    scale_color_manual(values = c("blue" = "#3366CC", "red" = "#DC3912")) +
    xlim(min(data$x) - 2, max(data$x) + 1) +
    ylim(0, 1.5) +
    theme_void() +
    theme(legend.position = "none",
          plot.margin = margin(10, 20, 10, 20),
          plot.background = element_rect(fill = "white", color = NA),
          panel.background = element_rect(fill = "white", color = NA))
}

# Example usage

varied_train <- c(1, 2, 3) # Specify varied training positions
constant_train <- c(3)     # Specify constant training position
both_test <- c(1,2,3,4,5,6)        # Specify test position
varied_trials <- 30        # Specify number of varied trials
constant_trials <- 90     # Specify number of constant trials
 create_plot(varied_train, constant_train, both_test, varied_trials, constant_trials)

```



## HTW Exp

```{r}
#| fig-width: 10
#| fig-height: 7

library(ggplot2)
library(dplyr)

create_data <- function(varied_train, constant_train, both_test) {
  varied_labels <- "Varied-Train"
  constant_labels <- "Constant-Train"
  test_labels <- "Testing"
  
  data <- data.frame(
    x = c(varied_train, constant_train, both_test),
    y = c(rep(0.7, length(varied_train)), rep(1, length(constant_train)), rep(0.3, length(both_test))),
    label = c(rep(varied_labels, length(varied_train)),
              rep(constant_labels, length(constant_train)),
              rep(test_labels, length(both_test))),
   color = c(rep("#00A08A", length(varied_train)), rep("#FF0000", length(constant_train)), rep("#ECCBAE", length(both_test)))
  )
  
  data
}

create_segments <- function(data) {
  min_x <- min(data$x)
  max_x <- max(data$x)
  segments <- data.frame(
    x = c(min_x - 0.5, min_x - 0.5, min_x - 0.5),
    xend = c(max_x + 0.5, max_x + 0.5, max_x + 0.5),
    y = c(0.7, 1, 0.3),
    yend = c(0.7, 1, 0.3)
  )
  segments
}

create_plot <- function(varied_train, constant_train, both_test) {
  data <- create_data(varied_train, constant_train, both_test)
  segments <- create_segments(data)
  
  # Variables for Training segment position
  train_x <- min(data$x) - .5
  train_y_start <- 0.65
  train_y_end <- 1.05
  train_text_y <- 1
  
  # Variables for Testing segment position
  test_x <- min(data$x) - .5
  test_y_start <- 0.25
  test_y_end <- 0.4
  test_text_y <- 0.45
  
  ggplot() +
    geom_segment(data = segments, aes(x = x, xend = xend, y = y, yend = yend),
                 linewidth = 1.2, color = "gray40") +
    geom_point(data = data, aes(x = x, y = y, color = color), size = 12) +
    geom_text(data = data, aes(x = x, y = y, label = label),
              color = "black", size = 4, vjust = -1.8, hjust = 0.5, fontface = "italic") +
    geom_segment(aes(x = train_x - 0.3, xend = train_x - 0.3, y = train_y_start, yend = train_y_end), color = "black", linewidth = 1.2) +
    geom_segment(aes(x = train_x - 0.5, xend = train_x, y = train_y_end, yend = train_y_end), color = "black", linewidth = 1.2) +
    geom_segment(aes(x = train_x - 0.5, xend = train_x, y = train_y_start, yend = train_y_start), color = "black", linewidth = 1.2) +
    geom_text(aes(x = train_x - .6, y = train_text_y, label = "Training"), angle = 90, vjust = 0.5, hjust = 1.5, size = 4, fontface = "bold") +
    geom_segment(aes(x = test_x - 0.3, xend = test_x - 0.3, y = test_y_start, yend = test_y_end), color = "black", linewidth = 1.2) +
    geom_segment(aes(x = test_x - 0.5, xend = test_x, y = test_y_end, yend = test_y_end), color = "black", linewidth = 1.2) +
    geom_segment(aes(x = test_x - 0.5, xend = test_x, y = test_y_start, yend = test_y_start), color = "black", linewidth = 1.2) +
    geom_text(aes(x = test_x - .6, y = test_text_y, label = "Testing"), angle = 90, vjust = 0.5, hjust = 1.5, size = 4, fontface = "bold") +
    scale_color_manual(values = c("#00A08A","#ECCBAE", "#FF0000")) +
    xlim(min(data$x) - 2, max(data$x) + 1) +
    ylim(0, 1.5) +
    theme_void() +
    theme(legend.position = "none",
          plot.margin = margin(10, 20, 10, 20),
          plot.background = element_rect(fill = "white", color = NA),
          panel.background = element_rect(fill = "white", color = NA))
}

# Example usage


varied_train <- c(4, 5, 6) # Specify varied training positions
constant_train <- c(4)     # Specify constant training position
both_test <- c(1, 2, 3, 4, 5, 6)  # Specify test positions
htw_e1 <- create_plot(varied_train, constant_train, both_test)

varied_train <- c(1, 2, 3) # Specify varied training positions
constant_train <- c(3)     # Specify constant training position
both_test <- c(1, 2, 3, 4, 5, 6)  # Specify test positions
htw_e2 <- create_plot(varied_train, constant_train, both_test)

htw_e1
htw_e2

ggsave(here::here("Presentation/assets/htw_e1_manip.png"), htw_e1, width = 9.0, height = 6, units = "in", dpi = 300)
ggsave(here::here("Presentation/assets/htw_e2_manip.png"), htw_e2, width = 9.0, height = 6, units = "in", dpi = 300)


varied_train <- c(1, 4) # Specify varied training positions
constant_train <- c(2)     # Specify constant training position
both_test <- c(1, 2, 3, 4)  # Specify test positions
igas_e1 <-  create_plot(varied_train, constant_train, both_test)
igas_e1
ggsave(here::here("Presentation/assets/igas_e1_manip.png"), igas_e1, width = 9.0, height = 6, units = "in", dpi = 300)


```



```{r}
#| fig-width: 10
#| fig-height: 7



library(ggplot2)
library(dplyr)

create_data <- function(varied_train, constant_train, both_test, test_labels_bottom) {
  varied_labels <- "Varied-Train"
  constant_labels <- "Constant-Train"
  test_labels <- "Testing"
  
  data <- data.frame(
    x = c(varied_train, constant_train, both_test),
    y = c(rep(0.7, length(varied_train)), rep(1, length(constant_train)), rep(0.3, length(both_test))),
    label = c(rep(varied_labels, length(varied_train)),
              rep(constant_labels, length(constant_train)),
              rep(test_labels, length(both_test))),
    color = c(rep("#00A08A", length(varied_train)), rep("#FF0000", length(constant_train)), rep("#ECCBAE", length(both_test))),
    label_bottom = c(rep(NA, length(varied_train) + length(constant_train)), test_labels_bottom)
  )
  
  data
}

create_segments <- function(data) {
  min_x <- min(data$x)
  max_x <- max(data$x)
  segments <- data.frame(
    x = c(min_x - 0.5, min_x - 0.5, min_x - 0.5),
    xend = c(max_x + 0.5, max_x + 0.5, max_x + 0.5),
    y = c(0.7, 1, 0.3),
    yend = c(0.7, 1, 0.3)
  )
  segments
}

create_plot <- function(varied_train, constant_train, both_test, test_labels_bottom) {
  data <- create_data(varied_train, constant_train, both_test, test_labels_bottom)
  segments <- create_segments(data)
  
  # Variables for Training segment position
  train_x <- min(data$x) - .5
  train_y_start <- 0.65
  train_y_end <- 1.05
  train_text_y <- 1
  
  # Variables for Testing segment position
  test_x <- min(data$x) - .5
  test_y_start <- 0.25
  test_y_end <- 0.4
  test_text_y <- 0.45
  
  ggplot() +
    geom_segment(data = segments, aes(x = x, xend = xend, y = y, yend = yend),
                 linewidth = 1.2, color = "gray40") +
    geom_point(data = data, aes(x = x, y = y, color = color), size = 12) +
    geom_text(data = data, aes(x = x, y = y+.01, label = label),
              color = "black", size = 4, vjust = -1.8, hjust = 0.5, fontface = "italic") +
    geom_text(data = data, aes(x = x, y = 0.2, label = label_bottom),
              color = "black", size = 4, vjust = 1.8, hjust = 0.5, fontface = "italic") +
    geom_segment(aes(x = train_x - 0.3, xend = train_x - 0.3, y = train_y_start, yend = train_y_end), color = "black", linewidth = 1.2) +
    geom_segment(aes(x = train_x - 0.5, xend = train_x, y = train_y_end, yend = train_y_end), color = "black", linewidth = 1.2) +
    geom_segment(aes(x = train_x - 0.5, xend = train_x, y = train_y_start, yend = train_y_start), color = "black", linewidth = 1.2) +
    geom_text(aes(x = train_x - .6, y = train_text_y, label = "Training"), angle = 90, vjust = 0.5, hjust = 1.5, size = 4, fontface = "bold") +
    geom_segment(aes(x = test_x - 0.3, xend = test_x - 0.3, y = test_y_start, yend = test_y_end), color = "black", linewidth = 1.2) +
    geom_segment(aes(x = test_x - 0.5, xend = test_x, y = test_y_end, yend = test_y_end), color = "black", linewidth = 1.2) +
    geom_segment(aes(x = test_x - 0.5, xend = test_x, y = test_y_start, yend = test_y_start), color = "black", linewidth = 1.2) +
    geom_text(aes(x = test_x - .6, y = test_text_y, label = "Testing"), angle = 90, vjust = 0.5, hjust = 1.5, size = 4, fontface = "bold") +
    scale_color_manual(values = c("#00A08A","#ECCBAE", "#FF0000")) +
    xlim(min(data$x) - 2, max(data$x) + 1) +
    ylim(0, 1.5) +
    theme_void() +
    theme(
          # plot.margin = margin(10, 20, 10, 20),
          # plot.background = element_rect(fill = "white", color = NA),
          # panel.background = element_rect(fill = "white", color = NA), 
          legend.position = "none",)
}

# Example usage

varied_train <- c(4, 5, 6) # Specify varied training positions
constant_train <- c(4)     # Specify constant training position
both_test <- c(1, 2, 3, 4, 5, 6)  # Specify test positions
test_labels_bottom <- c("100-350", "350-550", "600-800", "800-1000", "1000-1200", "1200-1400") # Labels for bottom of test points
htw_e1 <- create_plot(varied_train, constant_train, both_test, test_labels_bottom)
htw_e1


varied_train <- c(1, 2, 3) # Specify varied training positions
constant_train <- c(3)     # Specify constant training position
both_test <- c(1, 2, 3, 4, 5, 6)  # Specify test positions
htw_e2 <- create_plot(varied_train, constant_train, both_test,test_labels_bottom)
htw_e2


ggsave(here::here("Presentation/assets/htw_e1_manip.png"), htw_e1, width = 9.0, height = 6, units = "in", dpi = 300)
ggsave(here::here("Presentation/assets/htw_e2_manip.png"), htw_e2, width = 9.0, height = 6, units = "in", dpi = 300)


varied_train <- c(1, 4) # Specify varied training positions
constant_train <- c(2)     # Specify constant training position
both_test <- c(1, 2, 3, 4)  # Specify test positions
test_labels_bottom <- c("610", "760", "835", "910") # Labels for bottom of test points
igas_e1 <-  create_plot(varied_train, constant_train, both_test,test_labels_bottom)
igas_e1
ggsave(here::here("Presentation/assets/igas_e1_manip.png"), igas_e1, width = 9.0, height = 6, units = "in", dpi = 300)



```




## IGAS - EXP 2

```{r}
#| fig-width: 10
#| fig-height: 7


create_data <- function(varied_train, constant_train1, constant_train2, constant_train3, constant_train4, constant_train5, constant_train6, both_test,test_labels_bottom) {
    varied_labels <- "Varied-Train"
    constant_labels1 <- "Constant-1-Train"
    constant_labels2 <- "Constant-2-Train"
    constant_labels3 <- "Constant-3-Train"
    constant_labels4 <- "Constant-4-Train"
    constant_labels5 <- "Constant-5-Train"
    constant_labels6 <- "Constant-6-Train"
    test_labels <- "Testing"
    
    data <- data.frame(
        x = c(varied_train, constant_train1, constant_train2, constant_train3, constant_train4, constant_train5, constant_train6, both_test),
        y = c(rep(0.7, length(varied_train)), rep(1, length(constant_train1)), rep(1.3, length(constant_train2)), 
              rep(1.6, length(constant_train3)), rep(1.9, length(constant_train4)), rep(2.2, length(constant_train5)),
              rep(2.5, length(constant_train6)), rep(0.3, length(both_test))),
        label = c(rep(varied_labels, length(varied_train)),
                  rep(constant_labels1, length(constant_train1)),
                  rep(constant_labels2, length(constant_train2)),
                  rep(constant_labels3, length(constant_train3)),
                  rep(constant_labels4, length(constant_train4)),
                  rep(constant_labels5, length(constant_train5)),
                  rep(constant_labels6, length(constant_train6)),
                  rep(test_labels, length(both_test))),
        color = c(rep("#00A08A", length(varied_train)), rep("#FF0000", length(constant_train1)), rep("#FF0000", length(constant_train2)),
                  rep("#FF0000", length(constant_train3)), rep("#FF0000", length(constant_train4)), rep("#FF0000", length(constant_train5)),
                  rep("#FF0000", length(constant_train6)), rep("#ECCBAE", length(both_test))),
        label_bottom = c(rep(NA, length(varied_train) + length(constant_train)*6), test_labels_bottom)
    )
    
    data
}

create_segments <- function(data) {
    min_x <- min(data$x)
    max_x <- max(data$x)
    segments <- data.frame(
        x = c(min_x - 0.5, min_x - 0.5, min_x - 0.5, min_x - 0.5, min_x - 0.5, min_x - 0.5, min_x - 0.5, min_x - 0.5),
        xend = c(max_x + 0.5, max_x + 0.5, max_x + 0.5, max_x + 0.5, max_x + 0.5, max_x + 0.5, max_x + 0.5, max_x + 0.5),
        y = c(0.7, 1, 1.3, 1.6, 1.9, 2.2, 2.5, 0.3),
        yend = c(0.7, 1, 1.3, 1.6, 1.9, 2.2, 2.5, 0.3)
    )
    segments
}

create_plot <- function(varied_train, constant_train1, constant_train2, constant_train3, constant_train4, constant_train5, constant_train6, both_test,test_labels_bottom) {
    data <- create_data(varied_train, constant_train1, constant_train2, constant_train3, constant_train4, constant_train5, constant_train6, both_test,test_labels_bottom)
    segments <- create_segments(data)
    
    # Variables for Training segment position
    train_x <- min(data$x) - .5
    train_y_start <- 0.65
    train_y_end <- 2.55
    train_text_y <- 2.0
    
    # Variables for Testing segment position
    test_x <- min(data$x) - .5
    test_y_start <- 0.25
    test_y_end <- 0.4
    test_text_y <- 0.55
    
    ggplot() +
        geom_segment(data = segments, aes(x = x, xend = xend, y = y, yend = yend),
                     linewidth = 1.2, color = "gray40") +
        geom_point(data = data, aes(x = x, y = y, color = color), size = 12) +
        geom_text(data = data, aes(x = x, y = y, label = label),
                  color = "black", size = 4, vjust = -1.8, hjust = 0.5, fontface = "italic") +
      geom_text(data = data, aes(x = x, y = 0.2, label = label_bottom),
              color = "black", size = 4, vjust = 1.8, hjust = 0.5, fontface = "italic") +
        geom_segment(aes(x = train_x - 0.3, xend = train_x - 0.3, y = train_y_start, yend = train_y_end), color = "black", linewidth = 1.2) +
        geom_segment(aes(x = train_x - 0.5, xend = train_x, y = train_y_end, yend = train_y_end), color = "black", linewidth = 1.2) +
        geom_segment(aes(x = train_x - 0.5, xend = train_x, y = train_y_start, yend = train_y_start), color = "black", linewidth = 1.2) +
        geom_text(aes(x = train_x - .6, y = train_text_y, label = "Training"), angle = 90, vjust = 0.5, hjust = 1.5, size = 4, fontface = "bold") +
        geom_segment(aes(x = test_x - 0.3, xend = test_x - 0.3, y = test_y_start, yend = test_y_end), color = "black", linewidth = 1.2) +
        geom_segment(aes(x = test_x - 0.5, xend = test_x, y = test_y_end, yend = test_y_end), color = "black", linewidth = 1.2) +
        geom_segment(aes(x = test_x - 0.5, xend = test_x, y = test_y_start, yend = test_y_start), color = "black", linewidth = 1.2) +
        geom_text(aes(x = test_x - .65, y = test_text_y, label = "Testing"), angle = 90, vjust = 0.5, hjust = 1.5, size = 4, fontface = "bold") +
        scale_color_identity() +
        xlim(min(data$x) - 2, max(data$x) + 1) +
        ylim(0, 3.0) +
        theme_void() +
        theme(legend.position = "none")
}

# Example usage
varied_train <- c(3, 5)                   # Specify varied training positions
constant_train1 <- c(1)                   # Specify constant training position for group 1
constant_train2 <- c(2)                   # Specify constant training position for group 2
constant_train3 <- c(3)                   # Specify constant training position for group 3
constant_train4 <- c(4)                   # Specify constant training position for group 4
constant_train5 <- c(5) # Specify constant training position for group 5
constant_train6 <- c(6) # Specify constant training position for group 6
both_test <- c(1, 2, 3, 4, 5, 6) # Specify test positions
test_labels_bottom <- c("400", "500", "625","675", "800", "900")
igas_e2 <- create_plot(varied_train, constant_train1, constant_train2, constant_train3, constant_train4, constant_train5, constant_train6, both_test,test_labels_bottom)
igas_e2

ggsave(here::here("Presentation/assets/igas_e2_manip.png"), igas_e2, width = 9, height = 6, units = "in", dpi = 300)

```



# Sim Example






```{r}
pacman::p_load(dplyr,purrr,tidyr,tibble,ggplot2,here)
walk(c("Display_Functions"), ~source(here::here(paste0("Functions/", .x, ".R"))))

# Function to simulate exponential learning data
sim_exp <- function(N, alpha, beta, r, t0 = 0, sdlog = .1) {
  t0 + (alpha + (beta-alpha) * exp(-r * N)) + rlnorm(length(N), 0, sdlog)
}

# Parameters for simulation
N <- 1:50  # Number of trials
alpha <- 5  # Initial performance level
beta <- 15  # improvement

# Parameters for two groups
r_fast <- 0.1  # Faster learning rate
r_slow <- 0.05  # Slower learning rate

# Simulate data for two groups
set.seed(123)  # For reproducibility
data_fast <- sim_exp(N, alpha-3, beta, r_fast)
data_slow <- sim_exp(N, alpha, beta, r_slow)

# Combine data into a single dataframe
data <- data.frame(
  Trial = rep(N, 2),
  Performance = c(data_fast, data_slow),
  Group = factor(rep(c("Low Variability", "High Variability"), each = length(N)), levels=c("Low Variability", "High Variability"))
)

# Plot the data using ggplot2
tr_p <- ggplot(data, aes(x = Trial, y = Performance, color = Group)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  labs(
    title = "Learning Curves for Low and High Variability Training",
    x = "Training Trial",
    y = "Error",
    color = "Group"
  ) + ylim(0,20) +  theme(
    #panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )

# ggsave(here::here("Presentation/assets/train_pattern.png"), tr_p)
```


```{r}

# Simulate testing data for two groups
set.seed(123)  # For reproducibility
test_data_fast <- rnorm(length(N), mean = 5, sd = 1)
test_data_slow <- rnorm(length(N), mean = 2.5, sd = 1)

# Combine testing data into a single dataframe
test_data <- data.frame(
  Trial = rep(N, 2),
  Performance = c(test_data_fast, test_data_slow),
  Group = factor(rep(c("Low Variability", "High Variability"), each = length(N)), levels=c("Low Variability", "High Variability"))
)

# Plot the testing data using ggplot2
test_p <- ggplot(test_data, aes(x = Group, y = Performance, fill = Group)) +
  stat_summary(fun = mean, geom = "bar", position = "dodge", width = 0.7) +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = position_dodge(0.7), width = 0.25) +
  labs(
    title = "Testing Performance for Low and High Variability Training",
    x = "Group",
    y = "Error",
    fill = "Group"
  ) + ylim(0, 10) + theme(
    panel.grid.minor = element_blank()
  )

# ggsave(here::here("Presentation/assets/test_pattern.png"), test_p)
```




# IGAS Task Space

```{r}
#| label: fig-taskSpace
#| fig.cap: A) A visual representation of the combinations of throw parameters (x and y velocities applied to the ball at launch), which resulted in target hits during the testing phase. This empirical solution space was compiled from all of the participants in experiment 2. B) shows the solution space within the context of all of the throws made throughout the testing phase of the experiment.
#| fig-width: 11
#| fig-height: 9

pacman::p_load(dplyr,purrr,tidyr,tibble,ggplot2,here, RColorBrewer, patchwork)
walk(c("Display_Functions"), ~source(here::here(paste0("Functions/", .x, ".R"))))

e2<- readRDS(here::here('data/igas_e2_cleanedData-final.rds')) %>% mutate(initialVelocityX=X_Velocity,initialVelocityY=Y_Velocity)

taskspace <- e2 %>% filter(AbsDistFromCenter<900)
taskspace$hitOrMiss <- ifelse(taskspace$trialType==11,"Hit Target","Missed Target")

solSpace <- e2 %>% filter(trialType==11)
#solSpace %>% ggplot(aes(x=X_Velocity,y=Y_Velocity)) + geom_point(aes(colour=ThrowPosition),alpha=0.58) + ggtitle("") 

solSpace$Result = ifelse(solSpace$ThrowPosition==400,"400",solSpace$ThrowPosition)
solSpace$Result = ifelse(solSpace$ThrowPosition==500,"500",solSpace$Result)
solSpace$Result= ifelse(solSpace$ThrowPosition==625,"625",solSpace$Result)
solSpace$Result = ifelse(solSpace$ThrowPosition==675,"675",solSpace$Result)
solSpace$Result = ifelse(solSpace$ThrowPosition==800,"800",solSpace$Result)
solSpace$Result = ifelse(solSpace$ThrowPosition==900,"900",solSpace$Result)


missSpace <- e2 %>% filter(trialType !=11, abs(X_Velocity)<1000)
missSpace$Result = "Missed Target"
solSpace$Result <- solSpace$Result

# the usual method of changing the legend title does not seem to work after the colours are manually scaled. 
# multiplied velocoties by -1 to make the axes less confusing
ss= solSpace %>% ggplot(aes(x=X_Velocity*-1,y=Y_Velocity*-1)) + 
  geom_point(aes(colour=Result),alpha=0.6) + 
  scale_color_manual(values =brewer.pal(n=6,name="Set1")) +
  labs(color="Throw position:", 
  # title="Empirical Solution Space - Testing Positions",
  # subtitle="The XY velocity coordinates of all the successful throws", 
  x="X Release Velocity", 
  y="Y Release Velocity", )  
  theme(legend.position="top") 

fullSpace <- rbind(missSpace,solSpace)

fs<- fullSpace %>% ggplot(aes(x=X_Velocity*-1,y=Y_Velocity*-1,colour=Result)) + 
  geom_point(aes(),alpha=0.6) + scale_color_manual(values =brewer.pal(n=7,name="Set1"))+
  labs(color=element_blank(),
  # title="Full Space of Solution Throws and Missed Throws",
  # subtitle="Colored points represent coordinates of target hits, brown points are coordinates of misses",
  x="X Release Velocity", 
  y="Y Release Velocity") + 
  theme(legend.title = element_blank(), legend.position="top") 

ggsave(here::here("Presentation/assets/sol_space2.png"),ss, width = 5, height = 4, units = "in", dpi = 600)
ggsave(here::here("Presentation/assets/full_space2.png"),fs, width = 5, height = 3, units = "in", dpi = 600)

```



## IGAS Results


```{r}
pacman::p_load(tidyr,papaja, knitr, tinytex, RColorBrewer, kableExtra, cowplot, patchwork,here)
source(here::here('Functions/IGAS_ProcessFunctions.R'))

theme_set(theme_classic())
# load the processed data from experiment 1 and 2
e1 <- readRDS(here::here("data/igas_e1_cleanedData-final.rds")) %>% mutate(initialVelocityX=X_Velocity,initialVelocityY=Y_Velocity,stageInt=as.numeric(as.character(experimentStage)))
e2<- readRDS(here::here('data/igas_e2_cleanedData-final.rds')) %>% mutate(initialVelocityX=X_Velocity,initialVelocityY=Y_Velocity)
# load subject similarity data - computed with the IGAS model in 'IGAS-SimModel.R'
e2_sim <- readRDS(here::here('data/IGAS_Similarity-Performance.rds'))

options(contrasts = c("contr.sum", "contr.poly"))
defaultContrasts = options()$contrasts
theme_set(theme_classic())

dodge <- position_dodge(width = 0.9)
e2GrpPos <- c("400","500","625","675","800","900")
e2Grp <- paste("Constant","Constant", "Constant","Constant","Constant","Constant", "Varied")
e2Labels <- paste(c("400\n Constant","500\n Constant","625\n Constant","675\n Constant",
                   "800\n Constant","900\n Constant","500-800\n Varied"),sep="")

e1Pos <- c("610","760","835","910")
e1Var <- paste("Varied Train Position","Constant Train Position", "Novel Position", "Varied Training Position")
e1Labels<- paste(c("610\n Varied Trained","760\n Constant Trained","835\n Novel Location","910\n Varied Trained"),sep="")


exp1TrainPosition <- e1 %>% filter(stage!="Transfer",mode==1) %>%ungroup() %>% 
  group_by(sbjCode,Group,conditType,trainHalf,positionX) %>% 
  summarise(MeanTargetDistance=mean(AbsDistFromCenter),.groups = 'keep')

exp1TrainPosition3 <- e1 %>% filter(stage!="Transfer",mode==1) %>%ungroup() %>% 
  group_by(sbjCode,Group,conditType,stage,positionX) %>% 
  summarise(MeanTargetDistance=mean(AbsDistFromCenter),.groups = 'keep')

exp1Train <- e1 %>% filter(stage!="Transfer",mode==1)  %>%
  group_by(sbjCode,Group,conditType,trainHalf) %>% 
  summarise(MeanTargetDistance=mean(AbsDistFromCenter),.groups = 'keep')

exp1Train3 <- e1 %>% filter(stage!="Transfer",mode==1)  %>%
  group_by(sbjCode,Group,conditType,stage) %>% 
  summarise(MeanTargetDistance=mean(AbsDistFromCenter),.groups = 'keep')


e1train2 <- exp1TrainPosition3 %>% ggplot(aes(x=positionX,y=MeanTargetDistance))+
  geom_bar(aes(group=stage,fill=stage),stat="summary",fun=mean,position=dodge)+
  facet_wrap(~conditType,ncol=2)+
  stat_summary(aes(x=positionX,group=stage),fun.data=mean_se,geom="errorbar",position=dodge,width=.8)+
  ylab("Mean Distance From Center Of Target")+
  xlab("Training Location(s)")+theme(plot.title = element_text(hjust = 0.5))+
  guides(fill=guide_legend(title="Training Stage"))+theme(legend.title.align=.25)


#plot_grid(title,e1train2,capt,ncol=1,rel_heights=c(.18,1,.15))
plot_grid(e1train2,ncol=1)



walk(c("Display_Functions"), ~source(here::here(paste0("Functions/", .x, ".R"))))


nbins=5

htt_e1_train <-  e1 %>% filter(stage!="Transfer",mode==1) |> group_by(sbjCode,Group,positionX,conditType) |> 
    mutate(Trial_Bin = cut(trial, breaks = seq(1, max(trial),length.out=nbins+1),include.lowest = TRUE, labels=FALSE)) |>
ggplot(aes(x = Trial_Bin, y = AbsDistFromCenter, color = conditType)) +
    stat_summary(geom = "line", fun = mean) +
    stat_summary(geom = "errorbar", fun.data = mean_se, width = .4, alpha = .7) +
    facet_wrap(~positionX)+
    scale_x_continuous(breaks = seq(1, nbins + 1)) +
    theme(legend.title=element_blank()) + 
    labs(y = "Deviation", x="Training Block",col="Throw Position") 


htt_e2_train <- e2 %>% filter(stage!="Transfer",mode==1) |> group_by(sbjCode,Group,positionX,conditType) |> 
    mutate(Trial_Bin = cut(trial, breaks = seq(1, max(trial),length.out=nbins+1),include.lowest = TRUE, labels=FALSE)) |> ggplot(aes(x = Trial_Bin, y = AbsDistFromCenter, color = conditType)) +
    stat_summary(geom = "line", fun = mean) +
    stat_summary(geom = "errorbar", fun.data = mean_se, width = .4, alpha = .7) +
    facet_wrap(~positionX)+
    scale_x_continuous(breaks = seq(1, nbins + 1)) +
    theme(legend.title=element_blank()) + 
    labs(y = "Deviation", x="Training Block",col="Throw Position") 


ggsave(here::here("Presentation/assets/htt_e1_train.png"),htt_e1_train,width = 5, height = 2, units = "in", dpi = 300)
ggsave(here::here("Presentation/assets/htt_e2_train.png"),htt_e2_train,width = 5, height = 4, units = "in", dpi = 300)

```



```{r}

exp1.Test <- e1 %>% filter(stage=="Transfer") %>% select(-trainHalf)%>% group_by(positionX) %>% 
  mutate(globalAvg=mean(AbsDistFromCenter),globalSd=sd(AbsDistFromCenter)) %>% 
  group_by(sbjCode,positionX) %>% 
  mutate(scaledDev = scaleVar(globalAvg,globalSd,AbsDistFromCenter)) %>%
  ungroup() %>% group_by(sbjCode,conditType,positionX,ThrowPosition) %>%
summarise(MeanTargetDeviance = mean(AbsDistFromCenter),MeanScaleDev = mean(scaledDev),.groups="keep")%>% as.data.frame()

#manuscript plot
e1test1=exp1.Test %>% ggplot(aes(x=positionX,y=MeanTargetDeviance,group=conditType,fill=conditType))+
  geom_bar(stat="summary",fun=mean,position=dodge)+ stat_summary(fun.data=mean_se,geom="errorbar",position=dodge,width=.5)+ylab("Mean Distance From Center Of Target") +xlab("Testing Location")+
  guides(fill=guide_legend(title="Training Condition"))+
  theme(legend.title.align=.25, 
  axis.text.x = element_text(size = 8.5,angle=0),
  legend.position="top")+
  scale_x_discrete(name="Testing Location",labels=e1Labels)

e1test1



transfer <- filter(e2, stage=="Transfer") %>% droplevels() %>% select(-trainHalf,-initialVelocityY,ThrowPosition2)%>% ungroup()
transfer <- transfer %>% group_by(positionX) %>% mutate(globalAvg=mean(AbsDistFromCenter),globalSd=sd(AbsDistFromCenter)) %>% 
  group_by(sbjCode,positionX) %>% mutate(scaledDev = scaleVar(globalAvg,globalSd,AbsDistFromCenter)) %>%ungroup()

transfer <- transfer %>% group_by(sbjCode,positionX) %>% mutate(ind=1,testPosIndex=cumsum(ind),posN=max(testPosIndex)) %>%
  select(-ind) %>% mutate(testHalf = case_when(testPosIndex<15 ~"1st Half",testPosIndex>=15 ~"2nd Half")) %>% rstatix::convert_as_factor(testHalf)

variedTest <- transfer %>% filter(condit==7) %>% mutate(extrapolate=ifelse(positionX=="900" | positionX=="400","extrapolation","interpolation")) 
constantTest <- transfer %>% filter(condit!=7) %>% mutate(extrapolate=ifelse(distFromTrain==0,"interpolation","extrapolation"))

transfer <- rbind(variedTest,constantTest)


exp2.Test <- filter(e2, stage=="Transfer") %>% group_by(sbjCode,conditType,positionX,ThrowPosition,condit2) %>%
  summarise(MeanTargetDeviance = mean(AbsDistFromCenter,trim=.05)) %>%ungroup() %>% as.data.frame()

e2test1<- exp2.Test %>% ggplot(aes(x=ThrowPosition,y=MeanTargetDeviance,group=conditType,fill=conditType))+geom_bar(stat="summary",position=dodge,fun="mean")+ stat_summary(fun.data=mean_se,geom="errorbar",position=dodge,width=.5)+ylab("Mean Distance From Center Of Target") +xlab("Testing Location")+guides(fill=guide_legend(title="Training Condition"))+
  theme(plot.title=element_text(face="bold",size=9),
        plot.title.position = "plot",
        legend.title.align=.25)

ggsave(here::here("Presentation/assets/htt_e2_test.png"),e2test1,width = 5, height = 4, units = "in", dpi = 300)


exp2.Test %>% ggplot(aes(x=condit2,y=MeanTargetDeviance,group=conditType,fill=conditType))+geom_bar(stat="summary",position=dodge,fun="mean")+ stat_summary(fun.data=mean_se,geom="errorbar",position=dodge,width=.5)+ylab("Mean Distance From Center Of Target") +xlab("Testing Location")+guides(fill=guide_legend(title="Training Condition")) +
  facet_wrap(~positionX) + 
  theme(plot.title=element_text(face="bold",size=9),
        plot.title.position = "plot",
        legend.title.align=.25) + guides(fill=guide_legend(title="Training Condition"))+
  theme(plot.title=element_text(face="bold",size=9),
        plot.title.position = "plot",
        legend.title.align=.25,
        axis.text.x = element_text(size = 7,angle=45,hjust=1))+
  scale_x_discrete(name=" Training Group",labels=e2Labels)

```

